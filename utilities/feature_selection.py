#!/usr/bin/env python

import numpy as np
from sklearn.linear_model import Lasso
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import RandomizedLasso
from sklearn.linear_model import Ridge

y= [-3.56522, -3.8174, -4.34079, -4.25432, -4.52596, -2.9007, -4.55018, -4.96561, -3.11958, -3.92264, -5.85428, -5.82207, -5.38857, -5.81171, -3.76686, -4.21926, -3.70184, -6.61742, -6.61742, -5.72577, -3.90564, -5.08627, -6.33741, -4.31442, -6.8022, -4.32788, -5.18166, -3.89485, -6.04816, -5.28248, -3.04792]

x= [[-49.1466, -21.9869, 17.7999, -6.4588, 119.791, 124.341, 68.984, 231.746, 544.862, 22.0, 330.324], [-53.4365, -32.8943, 34.8723, -7.0384, 118.808, 76.647, 144.748, 245.462, 585.666, 23.0, 344.351], [-51.4111, -34.4904, 36.0326, -6.5443, 119.117, 166.984, 72.183, 205.941, 564.225, 23.0, 345.339], [-52.6647, -26.083, 32.5567, -6.6613, 117.636, 84.274, 123.906, 246.947, 572.763, 22.0, 329.336], [-49.7025, -25.8958, 30.0462, -6.4135, 118.952, 208.043, 0.441, 215.698, 543.134, 22.0, 331.312], [-47.7124, -15.0828, 18.0576, -6.3108, 119.03, 147.565, 72.891, 213.167, 552.653, 22.0, 330.324], [-50.6436, -39.9002, 47.2996, -6.731, 119.185, 217.774, 0.454, 226.171, 563.583, 23.0, 341.307], [-47.1907, -17.134, 21.065, -6.2407, 184.195, 150.677, 0.446, 208.846, 544.163, 22.0, 350.742], [-45.5613, -24.7869, 27.206, -6.3532, 117.841, 132.898, 41.716, 236.176, 528.63, 21.0, 315.31], [-55.6418, -12.8778, 25.5584, -6.3115, 2.616, 150.315, 161.464, 233.118, 547.514, 22.0, 320.362], [-49.3416, -20.1449, 27.393, -6.6271, 119.417, 100.226, 78.925, 247.252, 545.82, 22.0, 331.309], [-51.2009, -25.0958, 34.3107, -6.1591, 185.825, 152.279, 0.459, 198.115, 536.679, 23.0, 352.278], [-48.4658, -13.636, 20.4109, -6.1537, 150.208, 159.23, 0.444, 225.084, 534.966, 22.0, 334.288], [-45.3673, -36.065, 41.2372, -6.0807, 148.944, 159.165, 0.425, 227.424, 535.959, 22.0, 334.288], [-46.6857, -13.3219, 20.4588, -5.7238, 0.216, 159.289, 72.763, 250.694, 482.963, 20.0, 292.309], [-44.434, -25.2398, 30.5676, -6.0642, 114.622, 202.754, 0.36, 216.318, 534.053, 22.0, 331.312], [-48.0811, -16.7887, 26.308, -5.9595, 0.0, 131.366, 166.956, 244.727, 543.049, 19.0, 254.331], [-46.7245, -13.204, 21.9987, -5.7845, 0.0, 131.383, 194.842, 231.637, 557.863, 20.0, 268.358], [-45.4057, -11.7984, 19.4133, -5.7135, 149.642, 129.667, 0.445, 232.845, 512.599, 21.0, 298.239], [-47.658, -13.0338, 23.059, -5.571, 73.433, 100.131, 77.07, 261.066, 511.701, 18.0, 281.756], [-49.9654, -18.0396, 31.4706, -6.3664, 117.54, 160.994, 0.446, 269.016, 547.996, 22.0, 304.274], [-38.3644, -38.5725, 39.3658, -5.0088, 0.0, 131.363, 88.67, 269.339, 489.372, 17.0, 226.277], [-44.3741, -25.0582, 35.0632, -6.1471, 155.032, 131.318, 0.187, 252.577, 539.114, 21.0, 312.309], [-49.7123, -32.2469, 48.6552, -6.7698, 108.229, 203.751, 0.774, 240.854, 553.608, 23.0, 344.308], [-44.5989, -20.2066, 30.9074, -5.7881, 198.801, 71.628, 0.45, 260.097, 530.976, 20.0, 296.31], [-49.3714, -5.8245, 22.7942, -6.2701, 119.061, 99.901, 77.146, 244.065, 540.173, 21.0, 315.31], [-43.3691, -17.6311, 28.1122, -5.4715, 117.858, 118.543, 0.441, 259.873, 496.714, 20.0, 281.234], [-45.3096, -18.1322, 32.9867, -5.6648, 117.813, 131.32, 0.436, 257.935, 507.505, 20.0, 280.249], [-37.4565, -11.678, 20.7237, -4.698, 118.01, 54.561, 0.438, 276.654, 449.663, 17.0, 238.209], [-37.0174, -4.2681, 14.0112, -4.6233, 117.562, 0.0, 0.444, 318.851, 436.856, 16.0, 222.209], [-39.0808, -5.4508, 18.1692, -4.797, 117.814, 61.975, 0.432, 272.977, 453.198, 17.0, 237.224]]

names= ['VDWAALS', 'EEL', 'EGB', 'ESURF', 'mol_MW', 'SASA', 'FOSA', 'FISA', 'PISA', 'WPSA', '#nonHatm']

#A helper method for pretty-printing linear models
def pretty_print_linear(coefs, names = None, sort = False):
    if names == None:
        names = ["X%s" % x for x in range(len(coefs))]
    lst = zip(coefs, names)
    if sort:
        lst = sorted(lst,  key = lambda x:-np.abs(x[0]))
    return " + ".join("%s * %s" % (round(coef, 3), name)
                                   for coef, name in lst)

lr = LinearRegression()
lr.fit(x, y)
print("Linear model:", pretty_print_linear(lr.coef_))
print("R=", lr.score(x,y))

# L1 regularization / Lasso
lasso = Lasso(alpha=0.3)
lasso.fit(x,y)
print("Lasso model: ", pretty_print_linear(lasso.coef_, sort = True))
print("R=", lasso.score(x,y))


# L2 regularization / Ridge regression
ridge = Ridge(alpha=10)
ridge.fit(x,y)
print("Ridge model:", pretty_print_linear(ridge.coef_))
print("R=", ridge.score(x,y))

# Stability selection (the best method?)
rlasso = RandomizedLasso(alpha=0.025)
rlasso.fit(x,y)

print("Features sorted by their score:")
print(sorted(zip(map(lambda x: round(x, 4), rlasso.scores_), 
                 names), reverse=True))
print(rlasso.transform(x))


